//Given two strings s and t which consist of only lowercase letters.
//
//String t is generated by random shuffling string s and then add one more letter at a random position.
//
//Find the letter that was added in t.
//
//Example:
//
//Input:
//s = "abcd"
//t = "abcde"
//
//Output:
//e
//
//Explanation:
//'e' is the letter that was added.

impl Solution {
    pub fn find_the_difference(s: String, t: String) -> char {
        /*
        let mut sc: Vec<u8> = vec![0; 26];
        let mut tc: Vec<u8> = vec![0; 26];
        for l in s.bytes() {
            sc[(l - b'a') as usize] += 1;
        }
        for l in t.bytes() {
            tc[(l - b'a') as usize] += 1;
        }
        for i in 0..26 {
            if sc[i] != tc[i] {
                if let Some(a) = std::char::from_u32(i as u32 + 97) {
                    return a;
                }
            }
        }
        return 'a';
        */
        /*
        let mut x: u8 = 0;
        for l in s.bytes() {
            x ^= (l - b'a');
        }
        for l in t.bytes() {
            x ^= (l - b'a');
        }
        if let Some(a) = std::char::from_u32(x as u32 + 97) {
            return a;
        } else {
            return 'a';
        }
        */
        
        let ss = s.chars();
        let tt = t.chars().clone();
        for l in t.chars() {
            if tt.clone().filter(|&x| x == l).count() > ss.clone().filter(|&x| x == l).count() {
                return l;
            }
        }
        return 'a';
        
    }
}